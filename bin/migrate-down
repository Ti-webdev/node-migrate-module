#!/usr/bin/env node
// vim: set ft=javascript:
'use strict'

const program = require('commander')
const path = require('path')
const minimatch = require('minimatch')
const dotenv = require('dotenv')
const migrate = require('../')
const runMigrations = require('../lib/migrate')
const log = require('../lib/log')
const registerCompiler = require('../lib/register-compiler')
const pkg = require('../package.json')

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file', '.migrate')
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'file-store'))
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--matches <glob>', 'A glob pattern to filter migration files', '*')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .option('--env [name]', 'Use dotenv to load an environment file')
  .option('-F, --force', 'Force through the command, ignoring warnings')
  .parse(process.argv)

const options = program.opts()

// Change the working dir
process.chdir(options.chdir)

// Setup environment
if (options.env) {
  const e = dotenv.config({
    path: typeof options.env === 'string' ? options.env : '.env'
  })
  if (e && e.error instanceof Error) {
    throw e.error
  }
}

// Load compiler
if (options.compiler) {
  registerCompiler(options.compiler)
}

// Setup store
if (options.store[0] === '.') options.store = path.join(process.cwd(), options.store)

const Store = require(options.store)
const store = new Store(options.stateFile)

// Load in migrations
migrate.load({
  stateStore: store,
  migrationsDirectory: options.migrationsDir,
  filterFunction: minimatch.filter(options.matches),
  ignoreMissing: options.force
}, function (err, set) {
  if (err) {
    log.error('error', err)
    process.exit(1)
  }

  set.on('migration', function (migration, direction) {
    log(direction, migration.title)
  })

  runMigrations(set, 'down', program.args[0], function (err) {
    if (err) {
      log.error('error', err)
      process.exit(1)
    }

    log('migration', 'complete')
    process.exit(0)
  })
})
